scalar Date

enum BookKind {
    REGULAR
    AUDIO
    MIXED
}

type User {
    id: ID!
    email: String
    name: String!
    hash: String!
    salt: String!
    shareBooks: Boolean
    shareMovies: Boolean
}

type Book {
    id: ID!
    userId: ID!
    title: String!
    author: String!
    mode: BookKind!
    completed: Date!
}

type BookPage {
    books: [Book]
    cursor: String
}

input BookContent {
    title: String!
    author: String!
    mode: BookKind!
    completed: Date!
}
type Movie {
    id: ID!
    userId: ID!
    title: String!
    year: String!
    notes: String
    completed: Date!
    imdbId: String
}

type MovieInfo {
    id: ID!
    found: Boolean
    plot: String
    poster: String
}

input MovieContent {
    title: String!
    year: String!
    notes: String
    completed: Date!
    imdbId: String
}

type Query {
    users: [User]!
    user(id: ID!): User
    login(name: String, password: String): String

    books(userId: ID!, search: String): [Book]
    book(id: ID!): Book
    booksNextPage(userId: ID!, first: Int, after: String): BookPage
    booksPreviousPage(userId: ID!, last: Int, before: String): BookPage

    movies(userId: ID!, search: String): [Movie]
    movie(id: ID!): Movie

    movieInfo(id: ID!): MovieInfo
}

type Mutation {
    createBook(userId: ID!, bookContent: BookContent!): Book
    updateBook(id: ID!, userId: ID!, bookContent: BookContent!): Book
    deleteBook(id: ID!, userId: ID!): Book

    createMovie(userId: ID!, movieContent: MovieContent!): Movie
    updateMovie(id: ID!, userId: ID!, movieContent: MovieContent!): Movie
    deleteMovie(id: ID!, userId: ID!): Movie
}
