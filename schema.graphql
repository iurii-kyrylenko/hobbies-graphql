scalar Date

enum BookKind {
    REGULAR
    AUDIO
    MIXED
}

type User {
    id: ID!
    email: String!
    name: String!
    hash: String!
    salt: String!
    shareBooks: Boolean
    shareMovies: Boolean
}

type UserStats {
    id: ID!
    name: String!
    books: Int!
    movies: Int!
    total: Int!
}

input UserData {
    name: String!
    email: String!
    password: String!
}

type Book {
    id: ID!
    userId: ID!
    title: String!
    author: String!
    mode: BookKind!
    completed: Date!
}

input BookContent {
    title: String!
    author: String!
    mode: BookKind!
    completed: Date!
}
type Movie {
    id: ID!
    userId: ID!
    title: String!
    year: String!
    notes: String
    completed: Date!
    imdbId: String
}

type MovieInfo {
    id: ID!
    found: Boolean
    plot: String
    poster: String
}

input MovieContent {
    title: String!
    year: String!
    notes: String
    completed: Date!
    imdbId: String
}

type Query {
    people: [UserStats]
    login(name: String, password: String): String
    books(userId: ID!): [Book]
    movies(userId: ID!): [Movie]
    movieInfo(id: ID!): MovieInfo
}

type Mutation {
    register(captchaToken: String!, userData: UserData!): String
    createBook(userId: ID!, bookContent: BookContent!): Book
    updateBook(id: ID!, userId: ID!, bookContent: BookContent!): Book
    deleteBook(id: ID!, userId: ID!): Book

    createMovie(userId: ID!, movieContent: MovieContent!): Movie
    updateMovie(id: ID!, userId: ID!, movieContent: MovieContent!): Movie
    deleteMovie(id: ID!, userId: ID!): Movie
}
