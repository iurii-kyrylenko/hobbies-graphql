scalar Date

enum BookKind {
    REGULAR
    AUDIO
    MIXED
}

type User {
    id: ID!
    email: String
    name: String!
    shareBooks: Boolean
    shareMovies: Boolean
}

type Book {
    id: ID!
    userId: ID!
    title: String!
    author: String!
    mode: BookKind!
    completed: Date!
}

type BookPage {
    books: [Book]
    cursor: String
}

input CreateBookContent {
    userId: ID!
    title: String!
    author: String!
    mode: BookKind!
    completed: Date!
}

input UpdateBookContent {
    userId: ID
    title: String
    author: String
    mode: BookKind
    completed: Date
}

type Movie {
    id: ID!
    userId: ID!
    title: String!
    year: String!
    notes: String
    completed: Date!
    imdbId: String
}

input CreateMovieContent {
    userId: ID!
    title: String!
    year: String!
    notes: String
    completed: Date!
    imdbId: String
}

input UpdateMovieContent {
    userId: ID
    title: String
    year: String
    notes: String
    completed: Date
    imdbId: String
}

type Query {
    users: [User]!
    user(id: ID!): User

    books(userId: ID!): [Book]
    book(id: ID!): Book
    booksNextPage(userId: ID!, first: Int, after: String): BookPage
    booksPreviousPage(userId: ID!, last: Int, before: String): BookPage

    movies(userId: ID!): [Movie]
    movie(id: ID!): Movie
}

type Mutation {
    createBook(bookContent: CreateBookContent!): Book
    updateBook(id: ID!, bookContent: UpdateBookContent!): Book
    deleteBook(id: ID!): Book

    createMovie(movieContent: CreateMovieContent!): Movie
    updateMovie(id: ID!, movieContent: UpdateMovieContent!): Movie
    deleteMovie(id: ID!): Movie
}
